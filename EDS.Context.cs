//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDS
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbTIREntities : DbContext
    {
        public dbTIREntities()
            : base("name=dbTIREntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tblAddress> tblAddresses { get; set; }
        public virtual DbSet<tblAssessmentScore> tblAssessmentScores { get; set; }
        public virtual DbSet<tblAssessmentWeighting> tblAssessmentWeightings { get; set; }
        public virtual DbSet<tblClass> tblClasses { get; set; }
        public virtual DbSet<tblClassStudent> tblClassStudents { get; set; }
        public virtual DbSet<tblClassTeacher> tblClassTeachers { get; set; }
        public virtual DbSet<tblDistrict> tblDistricts { get; set; }
        public virtual DbSet<tblEnrollmentType> tblEnrollmentTypes { get; set; }
        public virtual DbSet<tblGender> tblGenders { get; set; }
        public virtual DbSet<tblImport> tblImports { get; set; }
        public virtual DbSet<tblImportAttribute> tblImportAttributes { get; set; }
        public virtual DbSet<tblImportIsat> tblImportIsats { get; set; }
        public virtual DbSet<tblImportMap> tblImportMaps { get; set; }
        public virtual DbSet<tblImportStudent> tblImportStudents { get; set; }
        public virtual DbSet<tblImportType> tblImportTypes { get; set; }
        public virtual DbSet<tblImportTypeAttribute> tblImportTypeAttributes { get; set; }
        public virtual DbSet<tblImportUser> tblImportUsers { get; set; }
        public virtual DbSet<tblLanguage> tblLanguages { get; set; }
        public virtual DbSet<tblLineage> tblLineages { get; set; }
        public virtual DbSet<tblRace> tblRaces { get; set; }
        public virtual DbSet<tblRcdt> tblRcdts { get; set; }
        public virtual DbSet<tblRole> tblRoles { get; set; }
        public virtual DbSet<tblSchool> tblSchools { get; set; }
        public virtual DbSet<tblSchoolTerm> tblSchoolTerms { get; set; }
        public virtual DbSet<tblSchoolYear> tblSchoolYears { get; set; }
        public virtual DbSet<tblSchoolYearSubject> tblSchoolYearSubjects { get; set; }
        public virtual DbSet<tblStudent> tblStudents { get; set; }
        public virtual DbSet<tblSubject> tblSubjects { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<SchoolTeacher> SchoolTeachers { get; set; }
        public virtual DbSet<viewMAP> viewMAPs { get; set; }
        public virtual DbSet<tblUserPasswordResetToken> tblUserPasswordResetTokens { get; set; }
        public virtual DbSet<tblAssessmentGradeWeighting> tblAssessmentGradeWeightings { get; set; }
        public virtual DbSet<tblAnnouncement> tblAnnouncements { get; set; }
        public virtual DbSet<tblAssessmentExpectation> tblAssessmentExpectations { get; set; }
        public virtual DbSet<tblAssessmentGradeWeightingCategory> tblAssessmentGradeWeightingCategories { get; set; }
        public virtual DbSet<tblWeightingCategory> tblWeightingCategories { get; set; }
        public virtual DbSet<tblStudentSchoolYear> tblStudentSchoolYears { get; set; }
        public virtual DbSet<tblKnowledgeBase> tblKnowledgeBases { get; set; }
        public virtual DbSet<tblKnowledgeBaseAttachment> tblKnowledgeBaseAttachments { get; set; }
        public virtual DbSet<tblAttachment> tblAttachments { get; set; }
        public virtual DbSet<tblReportTemplate> tblReportTemplates { get; set; }
        public virtual DbSet<tblReportTemplateConfiguration> tblReportTemplateConfigurations { get; set; }
        public virtual DbSet<tblAssessmentType> tblAssessmentTypes { get; set; }
        public virtual DbSet<tblUserDistrict> tblUserDistricts { get; set; }
        public virtual DbSet<tblUserSchool> tblUserSchools { get; set; }
        public virtual DbSet<tblUserLoginInfo> tblUserLoginInfoes { get; set; }
        public virtual DbSet<tblAssessmentTemplate> tblAssessmentTemplates { get; set; }
        public virtual DbSet<tblAssessment> tblAssessments { get; set; }
    
        public virtual ObjectResult<spGetTeacherImpactSummary_Result> spGetTeacherImpactSummary(Nullable<int> teacherId, Nullable<int> schoolId, Nullable<int> schoolYearId, Nullable<int> classId, Nullable<bool> viewMeetExceedSummary, string tblTempStudents)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("schoolId", schoolId) :
                new ObjectParameter("schoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("schoolYearId", schoolYearId) :
                new ObjectParameter("schoolYearId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var viewMeetExceedSummaryParameter = viewMeetExceedSummary.HasValue ?
                new ObjectParameter("ViewMeetExceedSummary", viewMeetExceedSummary) :
                new ObjectParameter("ViewMeetExceedSummary", typeof(bool));
    
            var tblTempStudentsParameter = tblTempStudents != null ?
                new ObjectParameter("tblTempStudents", tblTempStudents) :
                new ObjectParameter("tblTempStudents", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTeacherImpactSummary_Result>("spGetTeacherImpactSummary", teacherIdParameter, schoolIdParameter, schoolYearIdParameter, classIdParameter, viewMeetExceedSummaryParameter, tblTempStudentsParameter);
        }
    
        public virtual ObjectResult<spGetHeirarchicalTeacherImpactDetail_Result> spGetHeirarchicalTeacherImpactDetail(Nullable<int> subjectId, Nullable<int> schoolYearId, Nullable<int> assessmentTypeId, Nullable<int> teacherId, Nullable<int> gradeLevel, Nullable<bool> viewScaledScore, Nullable<int> classID, Nullable<int> districtId, Nullable<int> inputTermId, Nullable<int> race, Nullable<int> gender, Nullable<bool> frlIndicator, Nullable<bool> iepIndicator, Nullable<bool> lepIndicator, Nullable<bool> hispanic, Nullable<int> inputParentAssessmentTypeId)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var assessmentTypeIdParameter = assessmentTypeId.HasValue ?
                new ObjectParameter("AssessmentTypeId", assessmentTypeId) :
                new ObjectParameter("AssessmentTypeId", typeof(int));
    
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            var gradeLevelParameter = gradeLevel.HasValue ?
                new ObjectParameter("GradeLevel", gradeLevel) :
                new ObjectParameter("GradeLevel", typeof(int));
    
            var viewScaledScoreParameter = viewScaledScore.HasValue ?
                new ObjectParameter("ViewScaledScore", viewScaledScore) :
                new ObjectParameter("ViewScaledScore", typeof(bool));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var inputTermIdParameter = inputTermId.HasValue ?
                new ObjectParameter("InputTermId", inputTermId) :
                new ObjectParameter("InputTermId", typeof(int));
    
            var raceParameter = race.HasValue ?
                new ObjectParameter("Race", race) :
                new ObjectParameter("Race", typeof(int));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var frlIndicatorParameter = frlIndicator.HasValue ?
                new ObjectParameter("FrlIndicator", frlIndicator) :
                new ObjectParameter("FrlIndicator", typeof(bool));
    
            var iepIndicatorParameter = iepIndicator.HasValue ?
                new ObjectParameter("IepIndicator", iepIndicator) :
                new ObjectParameter("IepIndicator", typeof(bool));
    
            var lepIndicatorParameter = lepIndicator.HasValue ?
                new ObjectParameter("LepIndicator", lepIndicator) :
                new ObjectParameter("LepIndicator", typeof(bool));
    
            var hispanicParameter = hispanic.HasValue ?
                new ObjectParameter("Hispanic", hispanic) :
                new ObjectParameter("Hispanic", typeof(bool));
    
            var inputParentAssessmentTypeIdParameter = inputParentAssessmentTypeId.HasValue ?
                new ObjectParameter("InputParentAssessmentTypeId", inputParentAssessmentTypeId) :
                new ObjectParameter("InputParentAssessmentTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHeirarchicalTeacherImpactDetail_Result>("spGetHeirarchicalTeacherImpactDetail", subjectIdParameter, schoolYearIdParameter, assessmentTypeIdParameter, teacherIdParameter, gradeLevelParameter, viewScaledScoreParameter, classIDParameter, districtIdParameter, inputTermIdParameter, raceParameter, genderParameter, frlIndicatorParameter, iepIndicatorParameter, lepIndicatorParameter, hispanicParameter, inputParentAssessmentTypeIdParameter);
        }
    
        public virtual ObjectResult<spGetClassAssessmentScore_Result> GetClassAssessmentScore(Nullable<int> assessmentTypeId, Nullable<int> subjectId, Nullable<int> schoolYearId, Nullable<int> classId, Nullable<int> schoolTermId)
        {
            var assessmentTypeIdParameter = assessmentTypeId.HasValue ?
                new ObjectParameter("AssessmentTypeId", assessmentTypeId) :
                new ObjectParameter("AssessmentTypeId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var schoolTermIdParameter = schoolTermId.HasValue ?
                new ObjectParameter("SchoolTermId", schoolTermId) :
                new ObjectParameter("SchoolTermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetClassAssessmentScore_Result>("GetClassAssessmentScore", assessmentTypeIdParameter, subjectIdParameter, schoolYearIdParameter, classIdParameter, schoolTermIdParameter);
        }
    
        public virtual ObjectResult<spGetSchoolTermAssessment_Result> spGetSchoolTermAssessment(Nullable<int> assessmentTypeId, Nullable<int> subjectId, Nullable<int> schoolYearId, Nullable<int> schoolTermId)
        {
            var assessmentTypeIdParameter = assessmentTypeId.HasValue ?
                new ObjectParameter("AssessmentTypeId", assessmentTypeId) :
                new ObjectParameter("AssessmentTypeId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var schoolTermIdParameter = schoolTermId.HasValue ?
                new ObjectParameter("SchoolTermId", schoolTermId) :
                new ObjectParameter("SchoolTermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSchoolTermAssessment_Result>("spGetSchoolTermAssessment", assessmentTypeIdParameter, subjectIdParameter, schoolYearIdParameter, schoolTermIdParameter);
        }
    
        public virtual ObjectResult<spGetSchoolTermAssessment_Result> GetSchoolTermAssessment(Nullable<int> assessmentTypeId, Nullable<int> subjectId, Nullable<int> schoolYearId, Nullable<int> schoolTermId)
        {
            var assessmentTypeIdParameter = assessmentTypeId.HasValue ?
                new ObjectParameter("AssessmentTypeId", assessmentTypeId) :
                new ObjectParameter("AssessmentTypeId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var schoolTermIdParameter = schoolTermId.HasValue ?
                new ObjectParameter("SchoolTermId", schoolTermId) :
                new ObjectParameter("SchoolTermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSchoolTermAssessment_Result>("GetSchoolTermAssessment", assessmentTypeIdParameter, subjectIdParameter, schoolYearIdParameter, schoolTermIdParameter);
        }
    
        public virtual ObjectResult<spGetClassStudentAssessmentType_Result> GetClassStudentAssessmentType(Nullable<int> assessmentTypeId, Nullable<int> subjectId, Nullable<int> schoolYearId, Nullable<int> classId, Nullable<int> schoolId)
        {
            var assessmentTypeIdParameter = assessmentTypeId.HasValue ?
                new ObjectParameter("AssessmentTypeId", assessmentTypeId) :
                new ObjectParameter("AssessmentTypeId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetClassStudentAssessmentType_Result>("GetClassStudentAssessmentType", assessmentTypeIdParameter, subjectIdParameter, schoolYearIdParameter, classIdParameter, schoolIdParameter);
        }
    
        public virtual ObjectResult<spGetHeirachicalAssessmentType_Result> spGetHeirachicalAssessmentType(Nullable<int> assessmentTypeId)
        {
            var assessmentTypeIdParameter = assessmentTypeId.HasValue ?
                new ObjectParameter("AssessmentTypeId", assessmentTypeId) :
                new ObjectParameter("AssessmentTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHeirachicalAssessmentType_Result>("spGetHeirachicalAssessmentType", assessmentTypeIdParameter);
        }
    
        public virtual ObjectResult<spGetHeirachicalAssessmentType_Result> GetHeirachicalAssessmentType(Nullable<int> assessmentTypeId)
        {
            var assessmentTypeIdParameter = assessmentTypeId.HasValue ?
                new ObjectParameter("AssessmentTypeId", assessmentTypeId) :
                new ObjectParameter("AssessmentTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHeirachicalAssessmentType_Result>("GetHeirachicalAssessmentType", assessmentTypeIdParameter);
        }
    
        public virtual ObjectResult<spGetClassAssessmentScoreNew_Result> spGetClassAssessmentScoreNew(Nullable<int> assessmentTypeId, Nullable<int> subjectId, Nullable<int> schoolYearId, Nullable<int> classId, Nullable<int> schoolTermId)
        {
            var assessmentTypeIdParameter = assessmentTypeId.HasValue ?
                new ObjectParameter("AssessmentTypeId", assessmentTypeId) :
                new ObjectParameter("AssessmentTypeId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var schoolTermIdParameter = schoolTermId.HasValue ?
                new ObjectParameter("SchoolTermId", schoolTermId) :
                new ObjectParameter("SchoolTermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetClassAssessmentScoreNew_Result>("spGetClassAssessmentScoreNew", assessmentTypeIdParameter, subjectIdParameter, schoolYearIdParameter, classIdParameter, schoolTermIdParameter);
        }
    }
}
